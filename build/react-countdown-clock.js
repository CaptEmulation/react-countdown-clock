// Generated by CoffeeScript 1.9.3
(function() {
  var React, easeOutQuad;

  React = require('react');

  easeOutQuad = function(currentTime, start, end, duration) {
    currentTime /= duration;
    return -end * currentTime * (currentTime - 2) + start;
  };

  module.exports = React.createClass({displayName: "exports",
    _currentPercentage: 0,
    _radius: null,
    _fraction: null,
    _content: null,
    _canvas: null,
    mixins: [require('./onAppearMixin')],
    propTypes: {
      transitionMs: React.PropTypes.number,
      targetPercentage: React.PropTypes.number,
      currentPercentage: React.PropTypes.number,
      size: React.PropTypes.number,
      color: React.PropTypes.string,
      alpha: React.PropTypes.number,
      animated: React.PropTypes.bool,
      onComplete: React.PropTypes.func,
      onProgress: React.PropTypes.func
    },
    getDefaultProps: function() {
      return {
        size: 300,
        color: '#000',
        alpha: 1,
        currentPercentage: 0
      };
    },
    componentWillUpdate: function() {},
    componentWillUnmount: function() {
      return this._unmountables.forEach(function(u) {
        return u();
      });
    },
    componentWillMount: function() {
      this._unmountables = [];
      this._seconds = this.props.transitionMs;
      return this._currentPercentage = this.props.currentPercentage || 0;
    },
    componentWillReceiveProps: function(props) {
      if (this._currentPercentage === this.props.targetPercentage && this._currentPercentage !== this.props.currentPercentage) {
        this._updated = false;
        this._seconds = this.props.transitionMs;
        this._currentPercentage = this.props.currentPercentage || 0;
        return this._setupTimer();
      }
    },
    componentDidMount: function() {
      this._setScale();
      this._setupCanvas();
      this._drawTimer();
      this._drawBackground();
      if (this.isVisible(React.findDOMNode(this))) {
        this.setState({
          visible: true
        });
        this._setupTimer();
      }
      return this._unmountables.push(this.onAppearHandler(React.findDOMNode(this), function() {
        if (!this._animateing) {
          return this._setupTimer();
        }
      }, function() {
        return this.setState({
          visible: false
        });
      }, this));
    },
    _setupTimer: function() {
      this._animateing = true;
      return this._startTimer();
    },
    _updateCanvas: function() {
      this._clearTimer();
      return this._drawTimer();
    },
    _setScale: function() {
      this._delta = Math.abs(this._currentPercentage - this.props.targetPercentage);
      this._charge = this._currentPercentage < this.props.targetPercentage;
      this._radius = this.props.size / 2;
      return this._tickPeriod = 20;
    },
    _setupCanvas: function() {
      this._canvas = this.getDOMNode();
      this._context = this._canvas.getContext('2d');
      this._context.textAlign = 'center';
      this._context.textBaseline = 'middle';
      return this._context.font = "bold " + (this._radius / 2) + "px Arial";
    },
    _startTimer: function() {
      return setTimeout(((function(_this) {
        return function() {
          return _this._tick();
        };
      })(this)), 0);
    },
    _tick: function() {
      var start;
      start = Date.now();
      this._updated = false;
      return this._timerId = setTimeout(((function(_this) {
        return function() {
          var duration;
          duration = Date.now() - start;
          _this._seconds -= duration;
          _this._currentPercentage = easeOutQuad(_this.props.transitionMs - _this._seconds, _this.props.currentPercentage, _this.props.targetPercentage, _this.props.transitionMs);
          if (_this._seconds <= 0) {
            _this._currentPercentage = _this.props.targetPercentage;
            _this._updateCanvas();
            return _this._handleComplete();
          } else {
            _this._updateCanvas();
            return _this._tick();
          }
        };
      })(this)), this._tickPeriod);
    },
    _handleComplete: function() {
      this._animateing = false;
      if (this.props.onComplete) {
        return this.props.onComplete();
      }
    },
    _clearTimer: function() {
      clearTimeout(this._timerId);
      this._context.clearRect(0, 0, this._canvas.width, this._canvas.height);
      return this._drawBackground();
    },
    _drawBackground: function() {
      this._context.beginPath();
      this._context.globalAlpha = this.props.alpha / 3;
      this._context.arc(this._radius, this._radius, this._radius, 0, Math.PI * 2, false);
      this._context.arc(this._radius, this._radius, this._radius / 1.8, Math.PI * 2, 0, true);
      return this._context.fill();
    },
    _drawTimer: function() {
      var radians;
      this._updated = true;
      radians = this._currentPercentage / 100 * (Math.PI * 2) - Math.PI / 2;
      this._context.globalAlpha = this.props.alpha;
      this._context.fillStyle = this.props.color;
      this._context.font = "35px bebas";
      this._context.fillText(this._currentPercentage.toFixed(0) + '%', this._radius, this._radius);
      this.props.onProgress && this.props.onProgress(this._currentPercentage);
      this._context.beginPath();
      this._context.arc(this._radius, this._radius, this._radius, -Math.PI / 2, radians, false);
      this._context.arc(this._radius, this._radius, this._radius / 1.8, radians, -Math.PI / 2, true);
      return this._context.fill();
    },
    render: function() {
      return React.createElement("canvas", {
        "className": "react-countdown-clock",
        "width": this.props.size,
        "height": this.props.size
      });
    }
  });

}).call(this);
